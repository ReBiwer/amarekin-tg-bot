version: "3.9"
services:
  postgres:
    container_name: ${CONTAINER_DB_NAME}
    image: postgres:16.1-alpine3.18
    env_file:
      - backend/.env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - /var/lib/postgresql/data
      - .:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
      interval: 10s
      timeout: 10s
      retries: 30
    restart: unless-stopped
    networks:
      - network_amarekin

  redis:
    image: redis:latest
    env_file:
      - backend/.env
    container_name: redis_container
    ports:
      - '6379:6379'
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data

  chromadb:
    image: chromadb/chroma:latest
    env_file:
      - backend/.env
    container_name: ${CONTAINER_CHROMA_NAME}
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthServerProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${SECRET_TOKEN_CHROMA}
    volumes:
      - chroma_data:/chroma/chroma
    restart: unless-stopped
    networks:
      - network_amarekin

volumes:
  chroma_data:
  redis_data:

networks:
  network_amarekin:
    driver: bridge
